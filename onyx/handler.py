import os
import shutil
import json
import inspect
import traceback

class Handler:
	@staticmethod
	def __init__(datapack_path:str, override:bool=True) -> None:
		Handler._datapack_path = os.path.normpath(datapack_path)
		Handler._datapack_name = os.path.basename(os.path.normpath(Handler._datapack_path))
		Handler._path_list = {}

		if override:
			shutil.rmtree(Handler._datapack_path, ignore_errors=True)
			# Generate file structure  
			os.makedirs(os.path.join(Handler._datapack_path, "data", Handler._datapack_name, "functions"), exist_ok=True)

			# Generate pack.mcmeta
			with open(os.path.join(Handler._datapack_path, "pack.mcmeta"), "w+") as mc_meta_file:
				mc_meta_data = {"pack": {"pack_format": 5, "description": f"{Handler._datapack_name} | generated by Onyx"}}
				json.dump(mc_meta_data, mc_meta_file, indent=4)
		
		Handler._status(f"Removed old datapack: {Handler._datapack_name}")

	# Path decorator
	@staticmethod
	def path(path:str) -> None:
		def wrapper(function):
			# Normalize the path so "/" doesn't break
			new_path = os.path.normpath(path)

			# Create the path in case it doesn't exist
			os.makedirs(os.path.join(Handler._datapack_path, "data", Handler._datapack_name, "functions", new_path), exist_ok=True)

			# Assigns and registers the path in a list to be used by other methods 
			Handler._working_path = os.path.join(Handler._datapack_path, "data", Handler._datapack_name, "functions", new_path) 
			Handler._path_list[function.__name__] = Handler._working_path

			# Generate the mcfunction
			function()

			function_path = Handler._get_function_path(function.__name__)
			Handler._status(f"Generated new function: {Handler._datapack_name}:{function_path}")
			
			return function
		return wrapper

	# Loop decorator. 
	@staticmethod
	def loop(function) -> None:
		def wrapper():
			# Make the tick.json directory if it doesn't exist
			os.makedirs(os.path.join(Handler._datapack_path, "data", "minecraft", "tags", "functions"), exist_ok=True)

			# Get the tick.json contents and set default values if they don't exist
			try:
				with open(os.path.join(Handler._datapack_path, "data", "minecraft", "tags", "functions", "tick.json"), "r") as tick_json: 
					current_data = json.load(tick_json)
			except FileNotFoundError:
				current_data = {"values": []}
					
			# Update (or create) the file
			with open(os.path.join(Handler._datapack_path, "data", "minecraft", "tags", "functions", "tick.json"), "w+") as tick_json:
				# Get the function path, split it, and then keep only everything past /data/namespace/functions/
				function_path = Handler._get_function_path(function.__name__)  

				# Add the data to the list and dump it
				current_data["values"].append(f"{Handler._datapack_name}:{function_path}")
				json.dump(current_data, tick_json, indent=4)

			Handler._status(f"Added function to tick.json: {Handler._datapack_name}:{function_path}")

			return function
		return wrapper()

	# Private method so I don't have to make a new "with" block with each file. Special cases may still use "with open() as ..." (like "using")
	@staticmethod
	def _write(func_name:callable, text:str) -> None:
		with open(os.path.join(Handler._working_path, func_name + ".mcfunction"), "a") as _file:
			_file.write(f"{text}\n")

	# Print a warning in the terminal
	@staticmethod
	def _warn(text:str) -> None:
		# Gets the following info:
		# File "my:/file/path", line 87, in function_name
		#   function_call()
		traceback_loc = ''.join(traceback.format_list(traceback.extract_stack(limit=3)[:-2]))

		print(f"Warning: {text}")
		# Remove the last newline, then print the location and the warning text
		print(traceback_loc[:len(traceback_loc)-1])

	# Method is to make it more clear that it is for status messages
	@staticmethod
	def _status(text:str) -> None:
		print(f"{text}")

	# Used internally (mostly for _status)
	@staticmethod
	def _get_function_path(function) -> None:
		function_path = Handler._path_list[function].split(os.sep)
		function_path = function_path[function_path.index('functions') + 1:]
		return f"{'/'.join(function_path)}/{function}"